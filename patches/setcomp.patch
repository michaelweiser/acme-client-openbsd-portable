--- util.c
+++ util.c
@@ -311,3 +311,17 @@ checkexit_ext(int *rc, pid_t pid, enum comp comp)
 	}
 	return 1;
 }
+
+/* Set and get the component name of this process. Set program name as a side
+ * effect so that log messages show the component name for easier
+ * identification. */
+static enum comp	 proccomp = COMP__MAX;
+
+void setcomp(enum comp comp) {
+	proccomp = comp;
+	setprogname(comps[comp]);
+}
+
+enum comp  getcomp(void) {
+	return proccomp;
+}
--- extern.h
+++ extern.h
@@ -257,6 +257,7 @@ int		 verbose;
 /*
  * What component is the process within (COMP__MAX for none)?
  */
-enum comp	 proccomp;
+void 		 setcomp(enum comp);
+enum comp	 getcomp(void);
 
 #endif /* ! EXTERN_H */
--- main.c
+++ main.c
@@ -76,7 +76,6 @@ main(int argc, char *argv[])
 	int		  popts = 0;
 	pid_t		  pids[COMP__MAX];
 	extern int	  verbose;
-	extern enum comp  proccomp;
 	size_t		  i, altsz, ne;
 
 	struct acme_conf	*conf = NULL;
@@ -245,7 +244,7 @@ main(int argc, char *argv[])
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_NET] == 0) {
-		proccomp = COMP_NET;
+		setcomp(COMP_NET);
 		close(key_fds[0]);
 		close(acct_fds[0]);
 		close(chng_fds[0]);
@@ -276,7 +275,7 @@ main(int argc, char *argv[])
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_KEY] == 0) {
-		proccomp = COMP_KEY;
+		setcomp(COMP_KEY);
 		close(cert_fds[0]);
 		close(dns_fds[0]);
 		close(rvk_fds[0]);
@@ -298,7 +297,7 @@ main(int argc, char *argv[])
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_ACCOUNT] == 0) {
-		proccomp = COMP_ACCOUNT;
+		setcomp(COMP_ACCOUNT);
 		free(alts);
 		close(cert_fds[0]);
 		close(dns_fds[0]);
@@ -318,7 +317,7 @@ main(int argc, char *argv[])
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_CHALLENGE] == 0) {
-		proccomp = COMP_CHALLENGE;
+		setcomp(COMP_CHALLENGE);
 		free(alts);
 		close(cert_fds[0]);
 		close(dns_fds[0]);
@@ -337,7 +336,7 @@ main(int argc, char *argv[])
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_CERT] == 0) {
-		proccomp = COMP_CERT;
+		setcomp(COMP_CERT);
 		free(alts);
 		close(dns_fds[0]);
 		close(rvk_fds[0]);
@@ -355,7 +354,7 @@ main(int argc, char *argv[])
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_FILE] == 0) {
-		proccomp = COMP_FILE;
+		setcomp(COMP_FILE);
 		free(alts);
 		close(dns_fds[0]);
 		close(rvk_fds[0]);
@@ -376,7 +375,7 @@ main(int argc, char *argv[])
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_DNS] == 0) {
-		proccomp = COMP_DNS;
+		setcomp(COMP_DNS);
 		free(alts);
 		close(rvk_fds[0]);
 		c = dnsproc(dns_fds[0]);
@@ -391,7 +390,7 @@ main(int argc, char *argv[])
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_REVOKE] == 0) {
-		proccomp = COMP_REVOKE;
+		setcomp(COMP_REVOKE);
 		c = revokeproc(rvk_fds[0], certdir,
 		    certfile != NULL ? certfile : fullchainfile,
 		    force, revocate,
