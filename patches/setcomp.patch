--- util.c
+++ util.c
@@ -311,3 +311,17 @@ checkexit_ext(int *rc, pid_t pid, enum comp comp)
 	}
 	return 1;
 }
+
+/* Set and get the component name of this process. Set program name as a side
+ * effect so that log messages show the component name for easier
+ * identification. */
+static enum comp	 proccomp = COMP__MAX;
+
+void setcomp(enum comp comp) {
+	proccomp = comp;
+	setprogname(comps[comp]);
+}
+
+enum comp  getcomp(void) {
+	return proccomp;
+}
--- extern.h
+++ extern.h
@@ -257,6 +257,7 @@ int		 verbose;
 /*
  * What component is the process within (COMP__MAX for none)?
  */
-enum comp	 proccomp;
+void 		 setcomp(enum comp);
+enum comp	 getcomp(void);
 
 #endif /* ! EXTERN_H */
--- main.c.orig	2019-12-31 15:42:36.593855462 +0100
+++ main.c	2019-12-31 15:44:21.663930712 +0100
@@ -48,7 +48,6 @@
 	int		  popts = 0;
 	pid_t		  pids[COMP__MAX];
 	extern int	  verbose;
-	extern enum comp  proccomp;
 	size_t		  i, altsz, ne;
 
 	struct acme_conf	*conf = NULL;
@@ -204,7 +203,7 @@
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_NET] == 0) {
-		proccomp = COMP_NET;
+		setcomp(COMP_NET);
 		close(key_fds[0]);
 		close(acct_fds[0]);
 		close(chng_fds[0]);
@@ -234,7 +233,7 @@
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_KEY] == 0) {
-		proccomp = COMP_KEY;
+		setcomp(COMP_KEY);
 		close(cert_fds[0]);
 		close(dns_fds[0]);
 		close(rvk_fds[0]);
@@ -256,7 +255,7 @@
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_ACCOUNT] == 0) {
-		proccomp = COMP_ACCOUNT;
+		setcomp(COMP_ACCOUNT);
 		close(cert_fds[0]);
 		close(dns_fds[0]);
 		close(rvk_fds[0]);
@@ -276,7 +275,7 @@
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_CHALLENGE] == 0) {
-		proccomp = COMP_CHALLENGE;
+		setcomp(COMP_CHALLENGE);
 		close(cert_fds[0]);
 		close(dns_fds[0]);
 		close(rvk_fds[0]);
@@ -294,7 +293,7 @@
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_CERT] == 0) {
-		proccomp = COMP_CERT;
+		setcomp(COMP_CERT);
 		close(dns_fds[0]);
 		close(rvk_fds[0]);
 		close(file_fds[1]);
@@ -311,7 +310,7 @@
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_FILE] == 0) {
-		proccomp = COMP_FILE;
+		setcomp(COMP_FILE);
 		close(dns_fds[0]);
 		close(rvk_fds[0]);
 		c = fileproc(file_fds[1], certdir, domain->cert, domain->chain,
@@ -331,7 +330,7 @@
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_DNS] == 0) {
-		proccomp = COMP_DNS;
+		setcomp(COMP_DNS);
 		close(rvk_fds[0]);
 		c = dnsproc(dns_fds[0]);
 		exit(c ? EXIT_SUCCESS : EXIT_FAILURE);
@@ -345,7 +344,7 @@
 		err(EXIT_FAILURE, "fork");
 
 	if (pids[COMP_REVOKE] == 0) {
-		proccomp = COMP_REVOKE;
+		setcomp(COMP_REVOKE);
 		c = revokeproc(rvk_fds[0], domain->cert != NULL ? domain->cert :
 		    domain->fullchain, force, revocate,
 		    (const char *const *)alts, altsz);
